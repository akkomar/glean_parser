{# The final Go code is autogenerated, but this template is not. Please file bugs! #}
package glean

// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

// AUTOGENERATED BY glean_parser v{{ parser_version }}. DO NOT EDIT.

// required imports
import (
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

// log type string used to identify logs to process in the Moz Data Pipeline
var gleanEventMozlogType string = "glean-server-event"

// interface to send the log messages, accepting a call passing in the eventType and the message.
// TODO: confirm what calls to cloud logging would be required to see if the log method signature makes sense
// TODO: confirm if this should depend on https://github.com/mozilla-services/go-mozlog
type Logger interface {
	log(eventType string, message string)
}

type GleanEventsLogger struct {
	AppID             string
	AppDisplayVersion string
	AppChannel        string
	Logger            Logger
}

// exported type for public method parameters
type RequestInfo struct {
	UserAgent string
	IpAddress string
}

// TODO: verify with data team what defaults make sense for user agent / ip address if they are not supplied
var defaultRequestInfo = RequestInfo{
	UserAgent: "Unknown",
	IpAddress: "Unknown",
}

// structs to construct the glean ping
type clientInfo struct {
	TelemetrySDKBuild string `json:"telemetry_sdk_build"`
	FirstRunDate      string `json:"first_run_date"`
	OS                string `json:"os"`
	OSVersion         string `json:"os_version"`
	Architecture      string `json:"architecture"`
	AppBuild          string `json:"app_build"`
	AppDisplayVersion string `json:"app_display_version"`
	AppChannel        string `json:"app_channel"`
}

type pingInfo struct {
	Seq       int    `json:"seq"`
	StartTime string `json:"start_time"`
	EndTime   string `json:"end_time"`
}

type ping struct {
	DocumentNamespace string `json:"document_namespace"`
	DocumentType      string `json:"document_type"`
	DocumentVersion   string `json:"document_version"`
	DocumentID        string `json:"document_id"`
	UserAgent         string `json:"user_agent"`
	IpAddress         string `json:"ip_address"`
	Payload           string `json:"payload"`
}

type metrics map[string]map[string]interface{}

type pingPayload struct {
	ClientInfo clientInfo   `json:"client_info"`
	PingInfo   pingInfo     `json:"ping_info"`
	Metrics    metrics      `json:"metrics"`
	Events     []gleanEvent `json:"events"`
}

type gleanEvent struct {
	Category  string     `json:"category"`
	Name      string     `json:"name"`
	Timestamp int64      `json:"timestamp"`
	Extra     [][]string `json:"extra"`
}

func (g GleanEventsLogger) createClientInfo() clientInfo {
	// Fields with default values are required in the Glean schema, but not used in server context
	return clientInfo{
		TelemetrySDKBuild: "{glean_parser_version}",
		FirstRunDate:      "Unknown",
		OS:                "Unknown",
		OSVersion:         "Unknown",
		Architecture:      "Unknown",
		AppBuild:          "Unknown",
		AppDisplayVersion: g.AppDisplayVersion,
		AppChannel:        g.AppChannel,
	}
}

func createPingInfo() pingInfo {
	// TODO: confirm expected date format in logs,
	// js uses Date().toISOString(), ex. "2023-12-13T20:21:55.390Z"
	// ruby uses Time.now.utc, ex. "2023-12-13 20:21:02 UTC"
	var now = time.Now().UTC().Format("2006-01-02 15:04:05 MST")
	return pingInfo{
		Seq:       0,
		StartTime: now,
		EndTime:   now,
	}
}

func (g GleanEventsLogger) createPing(documentType string, config RequestInfo, payload string) ping {
	var documentId = uuid.New()
	return ping{
		DocumentNamespace: g.AppID,
		DocumentType:      documentType,
		DocumentVersion:   "1",
		DocumentID:        documentId.String(),
		UserAgent:         config.UserAgent,
		IpAddress:         config.IpAddress,
		Payload:           string(payload),
	}
}

// method called by each event or custom ping method
func (g GleanEventsLogger) record(
	documentType string,
	requestInfo RequestInfo,
	metrics metrics,
	events []gleanEvent,
) {
	var telemetryPayload = pingPayload{
		ClientInfo: g.createClientInfo(),
		PingInfo:   createPingInfo(),
		Metrics:    metrics,
		Events:     events,
	}

	var payloadJson, payloadErr = json.Marshal(telemetryPayload)
	if payloadErr != nil {
		panic("Unable to marshal payload to json")
	}

	// TODO: confirm expected shape with data team
	// ruby implementation wraps ping in another js object before JSON.dumping to a string
	// ex. { "Timestamp": string, "Logger": name, "Type": gleanEventMozLogType, "Severity": string, "Pid": string, "Fields": pingJson }
	// js appears not to
	var ping = g.createPing(documentType, requestInfo, string(payloadJson))
	var pingJson, err = json.Marshal(ping)
	if err != nil {
		panic("Unable to marshal ping to json")
	}
	g.Logger.log(gleanEventMozlogType, string(pingJson))
}

{% for ping, metrics_by_type in pings.items() %}
{% if ping != "events" %}
type {{ ping|ping_type_name }} struct {
  {% for metric_type, metrics in metrics_by_type.items() %}
  {% if metric_type != 'event' %}
  {% for metric in metrics %}
  {{ metric|metric_argument_name }} {{ metric.type|go_metric_type }} // {{ metric.description|clean_string }}
  {% endfor %}
  {% endif %}
  {% endfor %}
	{# TODO: if custom pings need to support including any event metric #}
}

// Record and submit a {{ ping|ping_type_name }} custon Ping
func (g GleanEventsLogger) Record{{ ping|ping_type_name }}(
	requestInfo RequestInfo,
	params {{ ping|ping_type_name }},
) {
	var metrics = metrics{
    {% for metric_type, metrics in metrics_by_type.items() %}
    {% if metric_type != 'event' %}
    "{{ metric_type }}": {
    {% for metric in metrics %}
      "{{ metric|metric_name }}": params.{{ metric|metric_argument_name }},
    {% endfor %}
    },
    {% endif %}
    {% endfor %}
	}
	var events = []gleanEvent{}
	g.record("{{ ping }}", requestInfo, metrics, events)
}

// Record and submit a {{ ping|ping_type_name }} custon Ping omitting user request info
func (g GleanEventsLogger) Record{{ ping|ping_type_name }}WithoutUserInfo(
	params {{ ping|ping_type_name }},
) {
	g.Record{{ ping|ping_type_name }}(defaultRequestInfo, params)
}

{% endif %}
{% endfor %}
{% if event_metric_exists %}
{# methods for sending individual event metrics #}
{% for ping, metrics_by_type in pings.items() %}
{% for event in metrics_by_type["event"] %}
type {{ event|event_type_name }} struct {
  {% for metric_type, metrics in metrics_by_type.items() %}
  {% if metric_type != 'event' %}
  {% for metric in metrics %}
  {{ metric|metric_argument_name }} {{ metric.type|go_metric_type }} // {{ metric.description|clean_string }}
  {% endfor %}
  {% endif %}
  {% endfor %}
  {% for extra, metadata in event.extra_keys.items() %}
  {{ extra|event_extra_name }} {{ metadata.type|go_metric_type }} // {{ metadata.description|clean_string }}
  {% endfor %}
}

// Record and submit an {{ event|event_type_name }} event.
// {{ event.description|clean_string }}
func (g GleanEventsLogger) Record{{ event|event_type_name }}(
	requestInfo RequestInfo,
	params {{ event|event_type_name }},
) {
	var metrics = metrics{
    {% for metric_type, metrics in metrics_by_type.items() %}
    {% if metric_type != 'event' %}
    "{{ metric_type }}": {
    {% for metric in metrics %}
      "{{ metric|metric_name }}": params.{{ metric|metric_argument_name }},
    {% endfor %}
    },
    {% endif %}
    {% endfor %}
	}
	var extraKeys = [][]string{
    {% for extra, metadata in event.extra_keys.items() %}
    {"{{ extra }}", params.{{ extra|event_extra_name }}},
    {% endfor %}
	}
	var events = []gleanEvent{
		gleanEvent{
			Category:  "{{ event.category }}",
			Name:      "{{ event.name }}",
			Timestamp: time.Now().UnixMilli(),
			Extra:     extraKeys,
		},
	}
	g.record("events", requestInfo, metrics, events)
}

// Record and submit an {{ event|event_type_name }} event omitting user request info
// {{ event.description|clean_string }}
func (g GleanEventsLogger) Record{{ event|event_type_name }}WithoutUserInfo(
  params {{ event|event_type_name }},
) {
	g.Record{{ event|event_type_name }}(defaultRequestInfo, params)
}

{% endfor %}
{% endfor %}
{% endif %}
